Project "TicketManagementSystem" {
  database_type: "PostgreSQL"
  note: '''
    # Ticket Management System
    **Database Documentation**
    
    This database is designed to manage user tickets, including user information, events, ticket purchases, and JWT authentication.
  '''
}

Enum event_categories {
  MUSIC
  THEATRE
  SPORTS
  CONFERENCE
  WORKSHOP
  FESTIVAL
  EXHIBITION
  SEMINAR
  WEBINAR
  COMPETITION
}

Enum ticket_status {
  AVAILABLE
  RESERVED
  SOLD
  CANCELLED
}

Enum order_status {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

Enum user_roles {
  ADMIN
  USER
}

Table users {
  id UUID [pk]
  name VARCHAR(255) [not null]
  email VARCHAR(255) [unique, not null]
  age INT [not null]
  password_hash VARCHAR(255) [not null]
  role user_roles [not null]
  phone_number VARCHAR(20)
  address VARCHAR(255)
  is_active BOOLEAN [default: true, not null]
  created_at TIMESTAMP [default: `now()`, not null]
  updated_at TIMESTAMP [default: `now()`, not null]
  
  Note: "Table representing users in the system"
  
  indexes {
    (email)
    (name)
    (is_active)
  }
}

Table events {
  id UUID [pk]
  name VARCHAR(255) [not null]
  description TEXT [not null]
  location VARCHAR(255) [not null]
  start_date TIMESTAMP [not null]
  end_date TIMESTAMP [not null]
  category event_categories [not null]
  organizer_id UUID [not null, ref: > users.id]
  max_capacity INT [not null]
  remaining_capacity INT [not null]
  status VARCHAR(50) [not null, default: 'Scheduled']
  price DECIMAL(10, 2) [not null]
  created_at TIMESTAMP [default: `now()`, not null]
  updated_at TIMESTAMP [default: `now()`, not null]
  
  Note: "Table representing events in the system"
  
  indexes {
    (start_date)
    (category)
    (organizer_id)
  }
}

Table tickets {
  id UUID [pk]
  event_id UUID [not null, ref: > events.id]
  price DECIMAL(10, 2) [not null]
  seat_number VARCHAR(20)
  purchase_date TIMESTAMP [default: `now()`, not null]
  ticket_status ticket_status [not null]
  qr_code VARCHAR(255) [not null]
  batch_number INT [not null]
  created_at TIMESTAMP [default: `now()`, not null]
  updated_at TIMESTAMP [default: `now()`, not null]
  
  Note: "Table representing tickets purchased by users"
  
  indexes {
    (event_id)
    (ticket_status)
    (purchase_date)
  }
}

Table orders {
  id UUID [pk]
  user_id UUID [not null, ref: > users.id]
  total_amount DECIMAL(10, 2) [not null]
  order_date TIMESTAMP [default: `now()`, not null]
  order_status order_status [not null]
  payment_method VARCHAR(50) [not null]
  created_at TIMESTAMP [default: `now()`, not null]
  updated_at TIMESTAMP [default: `now()`, not null]
  
  Note: "Table representing orders made by users"
  
  indexes {
    (user_id)
    (order_date)
    (order_status)
  }
}

Table order_tickets {
  order_id UUID [not null, ref: > orders.id]
  ticket_id UUID [not null, ref: > tickets.id]
  quantity INT [not null]
  
  indexes {
    (order_id, ticket_id) [pk]
    (ticket_id)
  }
  
  Note: "Table representing the tickets included in an order"
}

Table ratings {
  id UUID [pk]
  event_id UUID [not null, ref: > events.id]
  user_id UUID [not null, ref: > users.id]
  rating DECIMAL(2, 1) [not null] 
  review TEXT
  created_at TIMESTAMP [default: `now()`, not null]
  updated_at TIMESTAMP [default: `now()`, not null]
  
  Note: "Table representing ratings of events by users"
  
  indexes {
    (event_id, user_id) [unique]
    (rating)
    (created_at)
  }
}

Table activity_logs {
  id UUID [pk]
  user_id UUID [not null, ref: > users.id]
  activity TEXT [not null]
  ip_address VARCHAR(45) [not null]
  created_at TIMESTAMP [default: `now()`, not null]
  
  Note: "Table representing logs of user activities"
  
  indexes {
    (user_id)
    (created_at)
  }
}